// ----------------------------------------------------------------------------
// Mixin: Sizing
// ----------------------------------------------------------------------------

@import '../functions/gcd';

// Percentage based mixin.
//
// To use: pass a space separated list of numbers and an optional string to
// to create a suffix.
//
// Example:
// @include size( '_size', 2 4 );
//
// @param {string} $prefix - create selector name.
// @param {map} $size-units - Space separated list of integers.
// @param {string} $property [width] - Property to add dimensions to.
// @param {string} $suffix [''] - Add a modifier, etc.
// @param {boolean} $important - Add '!important' to your sizing declarations.
// @content Add any additional declarations to sizing declaration block.

@mixin _size($prefix, $size-units, $property: width, $suffix: '', $important: true) {

  @each $var in  $size-units {

    @for $i from 1 through $var - 1 {

      // Get greatest common denominator.
      $gcd: gcd( $i, $var );
      $x: $i / $gcd;

      // Create our selector with a % width.
      .#{$prefix}#{$i}of#{$var}#{$suffix} {
        @if $x < $i {
          @extend .#{$prefix}#{$x}of#{$var / $gcd}#{$suffix}
        }
        @else {
         #{$property}: percentage( $i / $var ) if($important, !important, null);
         @content;
        }
      }
    }
  }

}

// Build out compact sizing selectors.
//
// @param {string} $modifier [''] - set a modifier for class.
// @param {boolean} $important [true] - set declaration block to important.

@mixin _size-compact($modifier: '', $important: true) {
  ._sizeCompact#{$modifier},
  ._sizeCompactRight#{$modifier} {
    width: auto if($important, !important, '');
  }

  ._sizeCompact#{$modifier} {
    float: left if($important, !important, '');
  }

  ._sizeCompactRight#{$modifier} {
    float: right if($important, !important, '');
  }
}

// Build out occupy sizing selectors.
//
// @param {string} $modifier [''] - set a modifier for class.
// @param {boolean} $important [true] - set declaration block to important.

@mixin _size-occupy($modifier: '', $important: true) {
  ._sizeOccupy#{$modifier} {
    overflow: hidden if($important, !important, '');

    width: auto if($important, !important, '');
  }
}


// Build out full sizing selectors.
//
// @param {string} $modifier [''] - set a modifier for class.
// @param {boolean} $important [true] - set declaration block to important.

@mixin _size-full($modifier: '', $important: true) {
  ._sizeFull {
    box-sizing: border-box if($important, !important, '');
    width: 100% if($important, !important, '');
  }
}
