// -----------------------------------------------------------------------------
// Mixins: Modular Scale
// -----------------------------------------------------------------------------

// Set the modular scale of a number.
//
// @author thoughtbot https://github.com/thoughtbot/bourbon
// Copyright (c) 2011-2013 thoughtbot, inc
//
// @resource http://alistapart.com/article/more-meaningful-typography
//
// @example
// // Increment up by 1 with a ratio of 1.2
// font-size: _ms( 16px, 1, 1.25 );
// @returns 20.00
//
// // Increment down by 1 with a ratio of 1.2
// font-size: _ms( 16px, -1, 1.25 );
// @returns 12.800
//
// @param {number} $value
// @param {integer} $increment - Increment value (e.g. -2, -1, 0, 1, 2).
// @param {number} $ratio
// @returns {number} The modular scale of a given number.

@function _modular-scale($value, $increment, $ratio) {
  $v1: nth($value, 1);
  $v2: nth($value, length($value));
  $value: $v1;

  // scale $v2 to just above $v1
  @while $v2 > $v1 {
    $v2: ($v2 / $ratio); // will be off-by-1
  }
  @while $v2 < $v1 {
    $v2: ($v2 * $ratio); // will fix off-by-1
  }

  // check AFTER scaling $v2 to prevent double-counting corner-case
  $double-stranded: $v2 > $v1;

  @if $increment > 0 {
    @for $i from 1 through $increment {
      @if $double-stranded and ($v1 * $ratio) > $v2 {
        $value: $v2;
        $v2: ($v2 * $ratio);
      } @else {
        $v1: ($v1 * $ratio);
        $value: $v1;
      }
    }
  }

  @if $increment < 0 {
    // adjust $v2 to just below $v1
    @if $double-stranded {
      $v2: ($v2 / $ratio);
    }

    @for $i from $increment through -1 {
      @if $double-stranded and ($v1 / $ratio) < $v2 {
        $value: $v2;
        $v2: ($v2 / $ratio);
      } @else {
        $v1: ($v1 / $ratio);
        $value: $v1;
      }
    }
  }

  @return $value;
}
// Shorthand call for modular-scale.

@function _ms( $value, $increment, $ratio ) {
  @return _modular-scale( $value, $increment, $ratio );
}
